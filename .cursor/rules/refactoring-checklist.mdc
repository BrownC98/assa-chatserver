---
description: 
globs: 
alwaysApply: true
---
# ASSA Chat Server 1일 리팩토링 체크리스트

## 📋 작업 개요
- **목표**: User 클래스(757줄)를 3개 핸들러로 분리
- **시간**: 1일(8시간) 내 완료
- **방법**: 기존 JUnit 4.11 활용한 안전한 리팩토링
- **핵심**: 기존 기능 100% 유지 + 점진적 구조 개선

---

## 🕘 Phase 1: 준비 및 분석 (1시간) - 09:00~10:00

### 1.1 현재 상태 분석 및 백업
- [ ] **Git 상태 확인**
  ```bash
  git status
  git log --oneline -5
  ```
- [ ] **현재 코드 백업 커밋**
  ```bash
  git add .
  git commit -m "리팩토링 시작 전 백업 - User 클래스 757줄"
  ```
- [ ] **User 클래스 파일 열기 및 분석**
  - [ ] `src/main/java/com/teamnova/User.java` 파일 확인
  - [ ] 전체 줄 수 확인 (757줄 예상)
  - [ ] 주요 메서드 목록 파악

### 1.2 분리 대상 메서드 분석
- [ ] **연결 관리 관련 메서드 식별**
  - [ ] `replaceSocket()` 메서드 위치 확인
  - [ ] 소켓 상태 관리 로직 파악
  - [ ] 연결 해제 처리 로직 확인
  
- [ ] **메시지 처리 관련 메서드 식별**
  - [ ] `SendMessage()` 메서드 위치 확인
  - [ ] `checkReceive()` 메서드 위치 확인
  - [ ] `createRoom()`, `roomInfo()`, `roomExit()` 메서드 확인
  
- [ ] **WebRTC 관련 메서드 식별**
  - [ ] `createVideoRoom()`, `joinVideoRoom()` 메서드 확인
  - [ ] `handleSDP()`, `handleIceCandidate()` 메서드 확인
  - [ ] `mediaStatus()` 관련 로직 확인

### 1.3 테스트 환경 확인
- [ ] **JUnit 4.11 설정 확인**
  - [ ] `pom.xml`에서 JUnit 4.11 의존성 확인
  - [ ] 기존 테스트 파일 확인: `src/test/java/com/teamnova/AppTest.java`
  
- [ ] **테스트 실행 환경 검증**
  ```bash
  mvn test
  ```
- [ ] **빌드 환경 검증**
  ```bash
  mvn compile
  ```

### 🎯 Phase 1 완료 체크포인트
- [ ] **분리할 메서드 목록 문서화 완료**
- [ ] **백업 커밋 완료**
- [ ] **테스트 환경 정상 동작 확인**

---

## 🕙 Phase 2: 핵심 테스트 작성 (1.5시간) - 10:00~11:30

### 2.1 기존 기능 보호용 통합 테스트 작성

#### 2.1.1 사용자 연결/해제 테스트
- [ ] **UserConnectionTest.java 생성**
  ```java
  // src/test/java/com/teamnova/UserConnectionTest.java
  ```
- [ ] **연결 테스트 메서드 작성**
  - [ ] `testUserConnection()` - 사용자 연결 테스트
  - [ ] `testUserDisconnection()` - 사용자 해제 테스트
  - [ ] `testSocketReplacement()` - 소켓 교체 테스트

#### 2.1.2 메시지 송수신 테스트
- [ ] **MessageTest.java 생성**
  ```java
  // src/test/java/com/teamnova/MessageTest.java
  ```
- [ ] **메시지 테스트 메서드 작성**
  - [ ] `testSendMessage()` - 메시지 전송 테스트
  - [ ] `testReceiveMessage()` - 메시지 수신 테스트
  - [ ] `testRoomCreation()` - 채팅방 생성 테스트

#### 2.1.3 WebRTC 기본 시그널링 테스트
- [ ] **WebRTCTest.java 생성**
  ```java
  // src/test/java/com/teamnova/WebRTCTest.java
  ```
- [ ] **WebRTC 테스트 메서드 작성**
  - [ ] `testVideoRoomCreation()` - 영상방 생성 테스트
  - [ ] `testSDPHandling()` - SDP 처리 테스트
  - [ ] `testIceCandidateHandling()` - ICE 후보 처리 테스트

### 2.2 테스트 실행 및 현재 상태 확인
- [ ] **모든 테스트 실행**
  ```bash
  mvn test
  ```
- [ ] **테스트 결과 확인**
  - [ ] 모든 테스트 통과 확인
  - [ ] 실패한 테스트가 있다면 수정
  
- [ ] **현재 기능 동작 확인**
  - [ ] 서버 실행 테스트
  - [ ] 기본 기능 동작 확인

### 🎯 Phase 2 완료 체크포인트 및 커밋
- [ ] **테스트 코드 작성 완료**
- [ ] **모든 테스트 통과 확인**
- [ ] **커밋 실행**
  ```bash
  git add src/test/
  git commit -m "Phase 2 완료: 기존 기능 보호용 통합 테스트 작성"
  ```

---

## 🕐 Phase 3: UserConnectionManager 분리 (1.5시간) - 11:30~13:00

### 3.1 UserConnectionManager 클래스 생성
- [ ] **새 클래스 파일 생성**
  ```java
  // src/main/java/com/teamnova/UserConnectionManager.java
  ```
- [ ] **기본 클래스 구조 작성**
  ```java
  public class UserConnectionManager {
      private Socket socket;
      private boolean isConnected;
      
      // 생성자
      public UserConnectionManager(Socket socket) {
          this.socket = socket;
          this.isConnected = true;
      }
  }
  ```

### 3.2 연결 관리 메서드 이동
- [ ] **replaceSocket() 메서드 이동**
  - [ ] User 클래스에서 메서드 복사
  - [ ] UserConnectionManager로 이동
  - [ ] 필요한 import 추가
  
- [ ] **소켓 상태 관리 로직 이동**
  - [ ] 연결 상태 확인 메서드들 이동
  - [ ] 소켓 관련 getter/setter 메서드 이동
  
- [ ] **연결 해제 처리 로직 이동**
  - [ ] disconnect() 관련 메서드들 이동
  - [ ] 리소스 정리 로직 이동

### 3.3 User 클래스 수정
- [ ] **UserConnectionManager 인스턴스 추가**
  ```java
  private UserConnectionManager connectionManager;
  ```
- [ ] **생성자에서 ConnectionManager 초기화**
  ```java
  public User(Socket socket) {
      this.connectionManager = new UserConnectionManager(socket);
      // 기존 코드...
  }
  ```
- [ ] **기존 메서드들을 ConnectionManager로 위임**
  - [ ] replaceSocket() 메서드 위임
  - [ ] 연결 상태 관련 메서드들 위임

### 3.4 컴파일 및 테스트
- [ ] **컴파일 확인**
  ```bash
  mvn compile
  ```
- [ ] **컴파일 에러 수정**
  - [ ] import 문 추가/수정
  - [ ] 메서드 시그니처 조정
  
- [ ] **테스트 실행**
  ```bash
  mvn test
  ```
- [ ] **테스트 실패 시 수정**

### 🎯 Phase 3 완료 체크포인트 및 커밋
- [ ] **UserConnectionManager 클래스 생성 완료**
- [ ] **연결 관리 로직 분리 완료**
- [ ] **모든 테스트 통과 확인**
- [ ] **User 클래스 줄 수 확인** (예상: 600줄 이하)
- [ ] **커밋 실행**
  ```bash
  git add src/main/java/com/teamnova/UserConnectionManager.java
  git add src/main/java/com/teamnova/User.java
  git commit -m "Phase 3 완료: UserConnectionManager 분리 - 연결 관리 로직 분리"
  ```

---

## 🕐 Phase 4: MessageHandler 분리 (2시간) - 14:00~16:00

### 4.1 MessageHandler 클래스 생성
- [ ] **새 클래스 파일 생성**
  ```java
  // src/main/java/com/teamnova/MessageHandler.java
  ```
- [ ] **기본 클래스 구조 작성**
  ```java
  public class MessageHandler {
      private User user;
      private DBHelper dbHelper;
      
      public MessageHandler(User user) {
          this.user = user;
          this.dbHelper = DBHelper.getInstance();
      }
  }
  ```

### 4.2 메시지 처리 메서드 이동
- [ ] **SendMessage() 메서드 이동**
  - [ ] User 클래스에서 메서드 복사
  - [ ] MessageHandler로 이동
  - [ ] 의존성 조정 (User 참조 등)
  
- [ ] **checkReceive() 메서드 이동**
  - [ ] 메시지 수신 처리 로직 이동
  - [ ] 관련 헬퍼 메서드들도 함께 이동
  
- [ ] **채팅방 관련 메서드들 이동**
  - [ ] createRoom() 메서드 이동
  - [ ] roomInfo() 메서드 이동
  - [ ] roomExit() 메서드 이동
  - [ ] roomInvite() 메서드 이동

### 4.3 메시지 큐 관련 로직 이동
- [ ] **메시지 큐 관리 로직 이동**
  - [ ] LinkedList<String> messageQueue 관련 로직
  - [ ] 큐 조작 메서드들 이동
  
- [ ] **메시지 처리 스레드 로직 조정**
  - [ ] run() 메서드 내 메시지 처리 부분 분리
  - [ ] MessageHandler 호출로 변경

### 4.4 User 클래스 수정
- [ ] **MessageHandler 인스턴스 추가**
  ```java
  private MessageHandler messageHandler;
  ```
- [ ] **생성자에서 MessageHandler 초기화**
  ```java
  this.messageHandler = new MessageHandler(this);
  ```
- [ ] **기존 메서드들을 MessageHandler로 위임**
  - [ ] SendMessage() 위임
  - [ ] checkReceive() 위임
  - [ ] 채팅방 관련 메서드들 위임

### 4.5 컴파일 및 테스트
- [ ] **컴파일 확인**
  ```bash
  mvn compile
  ```
- [ ] **컴파일 에러 수정**
  - [ ] 순환 참조 문제 해결
  - [ ] 접근 제한자 조정
  
- [ ] **테스트 실행**
  ```bash
  mvn test
  ```
- [ ] **메시지 관련 테스트 집중 확인**

### 🎯 Phase 4 완료 체크포인트 및 커밋
- [ ] **MessageHandler 클래스 생성 완료**
- [ ] **메시지 처리 로직 분리 완료**
- [ ] **모든 테스트 통과 확인**
- [ ] **User 클래스 줄 수 확인** (예상: 400줄 이하)
- [ ] **커밋 실행**
  ```bash
  git add src/main/java/com/teamnova/MessageHandler.java
  git add src/main/java/com/teamnova/User.java
  git commit -m "Phase 4 완료: MessageHandler 분리 - 메시지 처리 로직 분리"
  ```

---

## 🕕 Phase 5: WebRTCSignalingHandler 분리 (1.5시간) - 16:00~17:30

### 5.1 WebRTCSignalingHandler 클래스 생성
- [ ] **새 클래스 파일 생성**
  ```java
  // src/main/java/com/teamnova/WebRTCSignalingHandler.java
  ```
- [ ] **기본 클래스 구조 작성**
  ```java
  public class WebRTCSignalingHandler {
      private User user;
      
      public WebRTCSignalingHandler(User user) {
          this.user = user;
      }
  }
  ```

### 5.2 WebRTC 관련 메서드 이동
- [ ] **영상방 관련 메서드들 이동**
  - [ ] createVideoRoom() 메서드 이동
  - [ ] joinVideoRoom() 메서드 이동
  - [ ] exitVideoRoom() 메서드 이동
  
- [ ] **시그널링 처리 메서드들 이동**
  - [ ] handleSDP() 메서드 이동
  - [ ] handleIceCandidate() 메서드 이동
  - [ ] offer, answer 처리 로직 이동
  
- [ ] **미디어 상태 관리 메서드들 이동**
  - [ ] mediaStatus() 관련 메서드들 이동
  - [ ] 참가자 관리 로직 이동
  - [ ] getVideoRoomParticipant() 메서드 이동

### 5.3 VideoRoom 관련 로직 정리
- [ ] **VideoRoom 클래스와의 연동 확인**
  - [ ] VideoRoom 인스턴스 관리 로직 확인
  - [ ] 영상방 상태 관리 로직 정리
  
- [ ] **WebRTC 상태 관리 로직 이동**
  - [ ] 미디어 스트림 상태 관리
  - [ ] 연결 상태 추적 로직

### 5.4 User 클래스 수정
- [ ] **WebRTCSignalingHandler 인스턴스 추가**
  ```java
  private WebRTCSignalingHandler webrtcHandler;
  ```
- [ ] **생성자에서 WebRTCHandler 초기화**
  ```java
  this.webrtcHandler = new WebRTCSignalingHandler(this);
  ```
- [ ] **기존 메서드들을 WebRTCHandler로 위임**
  - [ ] WebRTC 관련 모든 메서드들 위임

### 5.5 컴파일 및 테스트
- [ ] **컴파일 확인**
  ```bash
  mvn compile
  ```
- [ ] **컴파일 에러 수정**
  - [ ] VideoRoom 클래스 참조 문제 해결
  - [ ] 정적 변수 접근 문제 해결
  
- [ ] **테스트 실행**
  ```bash
  mvn test
  ```
- [ ] **WebRTC 관련 테스트 집중 확인**

### 🎯 Phase 5 완료 체크포인트 및 커밋
- [ ] **WebRTCSignalingHandler 클래스 생성 완료**
- [ ] **WebRTC 시그널링 로직 분리 완료**
- [ ] **모든 테스트 통과 확인**
- [ ] **User 클래스 줄 수 확인** (목표: 200줄 이하)
- [ ] **커밋 실행**
  ```bash
  git add src/main/java/com/teamnova/WebRTCSignalingHandler.java
  git add src/main/java/com/teamnova/User.java
  git commit -m "Phase 5 완료: WebRTCSignalingHandler 분리 - WebRTC 시그널링 로직 분리"
  ```

---

## 🕕 Phase 6: 최종 정리 및 검증 (0.5시간) - 17:30~18:00

### 6.1 전체 테스트 실행
- [ ] **모든 테스트 실행**
  ```bash
  mvn clean test
  ```
- [ ] **테스트 결과 확인**
  - [ ] 모든 테스트 통과 확인
  - [ ] 실패한 테스트 있다면 긴급 수정

### 6.2 코드 정리
- [ ] **불필요한 import 제거**
  - [ ] User.java import 정리
  - [ ] 새로 생성된 클래스들 import 정리
  
- [ ] **기본 주석 추가**
  - [ ] 각 핸들러 클래스에 클래스 레벨 주석 추가
  - [ ] 주요 메서드에 간단한 주석 추가

### 6.3 최종 검증
- [ ] **User 클래스 줄 수 최종 확인**
  - [ ] 목표: 200줄 이하 (최소: 400줄 이하)
  
- [ ] **새로 생성된 클래스들 확인**
  - [ ] UserConnectionManager.java 존재 확인
  - [ ] MessageHandler.java 존재 확인
  - [ ] WebRTCSignalingHandler.java 존재 확인
  
- [ ] **빌드 최종 확인**
  ```bash
  mvn clean compile
  ```

### 🎯 최종 커밋
- [ ] **최종 정리 커밋**
  ```bash
  git add .
  git commit -m "Phase 6 완료: 1일 리팩토링 최종 완료 - User 클래스 3개 핸들러로 분리"
  ```

---

## 📊 성공 기준 최종 체크

### ✅ 최소 성공 기준 (반드시 달성)
- [ ] User 클래스 크기 50% 이상 축소 (757줄 → 400줄 이하)
- [ ] 최소 1개 핸들러 분리 완료 (UserConnectionManager 우선)
- [ ] 기존 기능 100% 동작
- [ ] 컴파일 에러 없음

### 🎯 이상적 성공 기준 (목표)
- [ ] 3개 핸들러 모두 분리 완료
- [ ] User 클래스 200줄 이하로 축소
- [ ] 핵심 테스트 5개 이상 작성
- [ ] 코드 정리 완료

---

## 🚨 문제 발생 시 대응 가이드

### 컴파일 에러 발생 시
1. **즉시 이전 커밋으로 롤백**
   ```bash
   git reset --hard HEAD~1
   ```
2. **문제 원인 파악 후 다시 시도**
3. **시간이 부족하면 해당 Phase 스킵**

### 테스트 실패 시
1. **실패한 기능만 원복**
2. **나머지 작업 계속 진행**
3. **최종 커밋 전 반드시 해결**

### 시간 초과 시
1. **완료된 Phase만 커밋**
2. **미완료 작업은 다음 기회로 연기**
3. **최소 성공 기준 달성 여부 확인**

---

**🎯 목표**: 1일 8시간 내 User 클래스 분리를 통한 유지보수성 향상  
**🔑 핵심**: 기존 기능 유지 + 안전한 구조 개선  
**🛠️ 도구**: 기존 JUnit 4.11 + 점진적 리팩토링

> ⚡ **완벽함보다는 동작하는 개선**을 목표로, 시간 내에 실질적인 구조 개선을 달성합니다!

